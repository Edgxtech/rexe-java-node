syntax = "proto3";

package tech.edgx.rexe.protocol.ebitswap.pb;

message Message {

  message Wantlist {
    enum WantType {
      Block = 0;
      Have = 1;
      Dp = 2;
    }

    message Entry {
			bytes block = 1; //[(gogoproto.customtype) = "Cid", (gogoproto.nullable) = false];		// the block cid (cidV0 in bitswap 1.0.0, cidV1 in bitswap 1.1.0)
			int32 priority = 2;	// the priority (normalized). default to 1
			bool cancel = 3;		// whether this revokes an entry
      WantType wantType = 4; // Note: defaults to enum 0, ie Block
      bool sendDontHave = 5; // Note: defaults to false
      bytes auth = 6;
      bytes functionName = 7; // Only for WantType==2/DP
      repeated bytes params = 8; // Only for WantType==2/DP
      //repeated bytes args = 9; // Only for WantType==2/DP
      bytes args = 9;
		}

    repeated Entry entries = 1; //[(gogoproto.nullable) = false];	// a list of wantlist entries
    bool full = 2;							// whether this is the full wantlist. default to false
  }

  message Block {
    bytes prefix = 1;		// CID prefix (cid version, multicodec and multihash prefix (type + length)
    bytes data = 2;
    bytes auth = 3;
  }

  message DpResult {
    bytes prefix = 1;	// CID prefix (cid version, multicodec and multihash prefix (type + length)
    bytes data = 2; // Contains the output of the DP
    bytes auth = 3;
    bytes functionName = 4;
    repeated bytes params = 5; // Function params. TODO, can prob just make a hash of cid, fn, params[], args[] since this is just to help match to the original want
    //repeated bytes args = 6; // Constructor args. TODO, can prob just make a hash of cid, fn, params[], args[] since this is just to help match to the original want
    bytes args = 6; // New approach as a json string?
    bytes cidHash = 7;
  }

  enum BlockPresenceType {
    Have = 0;
    DontHave = 1;
  }
  message BlockPresence {
    bytes cid = 1; //[(gogoproto.customtype) = "Cid", (gogoproto.nullable) = false];
    BlockPresenceType type = 2;
    bytes auth = 3;
  }

  Wantlist wantlist = 1; //[(gogoproto.nullable) = false];
  repeated bytes blocks = 2;		// used to send Blocks in bitswap 1.0.0
  repeated Block payload = 3; //[(gogoproto.nullable) = false];		// used to send Blocks in bitswap 1.1.0
  repeated BlockPresence blockPresences = 4; //[(gogoproto.nullable) = false];
  int32 pendingBytes = 5;
  repeated DpResult resultPayload = 6;
}
